)
library(tidyverse)
library(leaflet)
library(shiny)
library(rsconnect)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
ch_bg <- read_csv('data/clean/ch_bg.csv')
ch_tracts <- read_csv('data/clean/ch_tracts.csv')
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
View(dc_bg_raw)
View(ch_landmarks)
View(ch_bg)
ch_landmarks_raw <- read_csv('congress_heights_landmarks-geocoded.csv')
ch_landmarks <- ch_landmarks_raw %>%
select('Category/Description','Name','Match_addr','Longitude','Latitude','RegionAbbr','geometry')
ch_landmarks <- ch_landmarks_raw %>%
select('Category/Description','Name','Match_addr','Longitude','Latitude','RegionAbbr','geometry')
View(ch_landmarks)
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84') %>%
mutate(RegionAbbr == 'DC')
View(ch_bg)
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84') %>%
mutate(RegionAbbr = 'DC')
civic_institutions <- ch_bg %>%
right_join(ch_landmarks, by='RegionAbbr')
View(civic_institutions)
summary(civic_institutions)
145/29
civic_institutions <- ch_bg %>%
full_join(ch_landmarks, by='RegionAbbr')
View(civic_institutions)
civic_institutions <- ch_bg %>%
left_join(ch_landmarks, by='RegionAbbr')
library(leaflet)
landmarks_proposedarea <- leaflet(data = civic_institutions) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
landmarks_proposedarea <- leaflet(data = civic_institutions) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.25,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
### proposed boundaries and civic institutions
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 0.5, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea <- leaflet(data = civic_institutions) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 0.5, fillOpacity = 0.25,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
### proposed boundaries and civic institutions
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
knitr::opts_chunk$set(echo = TRUE)
ui <- fluidPage(
leafletOutput("mymap")
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(shiny)
library(rsconnect)
ch_bg <- read_csv('data/clean/ch_bg.csv')
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
})
}
shinyApp(ui, server)
rsconnect::deployApp('shiny_proposed-boundaries_civic-institutions.Rmd')
library(tidyverse)
library(leaflet)
library(shiny)
library(rsconnect)
library(urbnthemes)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
})
}
rsconnect::deployApp('shiny_proposed-boundaries_civic-institutions.Rmd')
rsconnect::deployApp('shiny_proposed-boundaries_civic-institutions.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(shiny)
library(rsconnect)
library(urbnthemes)
rsconnect::deployApp('shiny_proposed-boundaries_civic-institutions.Rmd')
setwd("~/Documents/GitHub/parcel-15")
rsconnect::deployApp('shiny_proposed-boundaries_civic-institutions.Rmd')
library(shiny)
library(tidyverse)
library(leaflet)
library(shiny)
library(rsconnect)
library(urbnthemes)
# Define UI for application that draws a histogram
ui <- fluidPage(
leafletOutput("mymap")
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('test')
library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
set_urbn_defaults(style = "map")
options(tigris_class = "sf")
### import raw data
dc_bg_raw <- block_groups(
state = "DC",
cb = TRUE,
year = 2021
)
dc_tracts_raw <- tracts(
state = 'DC',
cb = TRUE,
year = 2021
)
dc_state <- states(
cb = TRUE,
year = 2021
) %>%
filter(STUSPS == 'DC')
dc_wards <- st_read('Wards_from_1992/Wards_from_1992.shp')
ch_landmarks_raw <- read_csv('congress_heights_landmarks-geocoded.csv')
ch_landmarks_raw <- read_csv('data/raw/congress_heights_landmarks-geocoded.csv')
ch_landmarks_raw <- read_csv('data/raw/congress_heights_landmarks-geocoded.csv')
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84') %>%
mutate(RegionAbbr = 'DC')
library(tidycensus)
install.packages('tidycensus')
library(tidycensus)
# variables of interest
vars <- c(
"B19013_001"  # median household income estimate
)
# states of interest: alabama, alaska, arizona
state_fips <- c("11")
# states of interest: alabama, alaska, arizona
dc_fips <- c("11")
# create a custom function that works for one state
get_income <- function(dc_fips) {
income_data <- get_acs(geography = "tract",
variables = vars,
state = state_fips,
year = 2021,
survey = 'acs5')
return(income_data)
}
# iterate the function
map_df(.x = dc_fips, # iterate along the vector of state fips codes
.f = get_income) # apply get_income() to each fips_code
census_api_key('1c9f847f225bc196104c12fc6ef2a8dd9a40d37b')
census_api_key('1c9f847f225bc196104c12fc6ef2a8dd9a40d37b', install=TRUE)
library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
library(tidycensus)
set_urbn_defaults(style = "map")
options(tigris_class = "sf")
# variables of interest
vars <- c(
"B19013_001"  # median household income estimate
)
# states of interest: alabama, alaska, arizona
dc_fips <- c("11")
# create a custom function that works for one state
get_income <- function(dc_fips) {
income_data <- get_acs(geography = "tract",
variables = vars,
state = state_fips,
year = 2021,
survey = 'acs5')
return(income_data)
}
# iterate the function
map_df(.x = dc_fips, # iterate along the vector of state fips codes
.f = get_income) # apply get_income() to each fips_code
census_api_key('1c9f847f225bc196104c12fc6ef2a8dd9a40d37b', install=TRUE)
# create a custom function that works for one state
get_income <- function(dc_fips) {
income_data <- get_acs(geography = "block group",
variables = vars,
state = state_fips,
year = 2021,
survey = 'acs5')
return(income_data)
}
# iterate the function
map_df(.x = dc_fips, # iterate along the vector of state fips codes
.f = get_income) # apply get_income() to each fips_code
# create a custom function that works for one state
get_income <- function(dc_fips) {
income_data <- get_acs(geography = "block group",
variables = vars,
state = dc_fips,
year = 2021,
survey = 'acs5')
return(income_data)
}
# iterate the function
map_df(.x = dc_fips, # iterate along the vector of state fips codes
.f = get_income) # apply get_income() to each fips_code
# variables of interest
v21 <- load_variables(2021, "acs5", cache = TRUE)
View(v21)
vars <- c(
"B19013_001",  # median household income estimate
starts_with("B01001_")
)
vars <- c(
"B19013_001",  # median household income estimate
"B01001_001",
"B01001_002",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
"B01001_001",
)
vars <- c(
med_hh_inc = "B19013_001",  # median household income estimate
"B01001_001",
"B01001_002",
"B01001_003",
"B01001_004",
"B01001_005",
"B01001_006",
"B01001_007",
"B01001_008",
"B01001_009",
"B01001_010",
"B01001_011",
"B01001_012",
"B01001_013",
"B01001_014",
"B01001_015",
"B01001_016",
"B01001_017",
"B01001_018",
"B01001_019",
"B01001_020",
"B01001_021",
"B01001_022",
"B01001_023",
"B01001_024",
"B01001_025",
"B01001_026",
"B01001_027",
"B01001_028",
"B01001_029",
"B01001_030",
"B01001_031",
"B01001_032",
"B01001_033",
"B01001_034",
"B01001_035",
"B01001_036",
"B01001_037",
"B01001_038",
"B01001_039",
"B01001_040",
"B01001_041",
"B01001_042",
"B01001_043",
"B01001_044",
"B01001_045",
"B01001_046",
"B01001_046",
"B01001_048",
"B01001_049"
)
income_data <- get_acs(geography = "block group",
variables = vars,
state = '11',
year = 2021,
survey = 'acs5')
View(income_data)
View(income_data)
View(income_data)
vars <- c(
med_hh_inc = "B19013_001",  # median household income estimate
total_age = "B01001_001",
m_total_age = "B01001_002",
m_under5 = "B01001_003",
m_5to9 = "B01001_004",
m_10to14 = "B01001_005",
m_15to17 = "B01001_006",
m_18to19 = "B01001_007",
m_20 = "B01001_008",
m_21 = "B01001_009",
m_22to24 = "B01001_010",
m_25to29 = "B01001_011",
m_30to34 = "B01001_012",
m_35to39 = "B01001_013",
m_40to44 = "B01001_014",
m_45to49 = "B01001_015",
m_50to54 = "B01001_016",
m_55to59 = "B01001_017",
m_60and61 = "B01001_018",
m_62to64 = "B01001_019",
m_65and66 = "B01001_020",
m_67to69 = "B01001_021",
m_70to74 = "B01001_022",
m_75to79 = "B01001_023",
m_80to84 = "B01001_024",
m_85plus = "B01001_025",
f_total_age = "B01001_026",
f_under5 = "B01001_027",
f_5to9 = "B01001_028",
f_10to14 = "B01001_029",
f_15to17 = "B01001_030",
f_18to19 = "B01001_031",
f_20 = "B01001_032",
f_21 = "B01001_033",
f_22to24 = "B01001_034",
f_25to29 = "B01001_035",
f_30to34 = "B01001_036",
f_35to39 = "B01001_037",
f_40to44 = "B01001_038",
f_45to49 = "B01001_039",
f_50to54 = "B01001_040",
f_55to59 = "B01001_041",
f_60and61 = "B01001_042",
f_62to64 = "B01001_043",
f_65and66 = "B01001_044",
f_67to69 = "B01001_045",
f_70to74 = "B01001_046",
f_75to79 = "B01001_046",
f_80to84 = "B01001_048",
m_85plus = "B01001_049"
)
income_data <- get_acs(geography = "block group",
variables = vars,
state = '11',
year = 2021,
survey = 'acs5')
View(income_data)
demographics_raw <- get_acs(geography = "block group",
variables = vars,
state = '11',
year = 2021,
survey = 'acs5')
demographics <- demographics_raw %>%
pivot_wider(names_from = 'variable', values_from = c('estimate','moe'))
View(demographics)
demographics_raw <- get_acs(geography = "block group",
variables = vars,
state = '11',
year = 2021,
survey = 'acs5',
geometry = TRUE)
demographics <- demographics_raw %>%
pivot_wider(names_from = 'variable', values_from = c('estimate','moe')) %>%
filter(GEOID %in% c('110010073041','110010073042','110010073043',
'110010098041','110010098042'))
demographics <- demographics_raw %>%
pivot_wider(names_from = 'variable', values_from = c('estimate','moe')) %>%
filter(GEOID %in% c('110010073041','110010073042','110010073043',
'110010098041','110010098042')) %>%
mutate(under5 = estimate_m_under5+estimate_f_under5)
