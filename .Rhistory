library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
install.packages('shiny')
install.packages("shiny")
library(shiny)
install.packages("shiny")
if (!require("remotes"))
install.packages("remotes")
remotes::install_github("rstudio/shiny")
install.packages('bslib')
install.packages('htmltools')
install.packages("htmltools")
install.packages('shiny')
install.packages('installr')
updateR()
installr::updateR()
library(shiny)
install.packages('shiny')
remove.packages('shiny')
install.packages('shiny')
install.packages('rtools')
install.packages('fastmap')
install.packages('shiny')
install.packages('shiny')
install.packages('htmltools', type='source')
library(shiny)
library(tigris)
library(tidyverse)
install.packages('cli')
install.packages('rlang')
install.packages("rlang")
install.packages('tigris')
install.packages('tidyverse')
install.packages('urbnthemes')
install.packages('sf')
install.packages('leaflet')
install.packages('rgdal')
install.packages('shiny')
library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
set_urbn_defaults(style = "map")
options(tigris_class = "sf")
### import raw data
dc_bg_raw <- block_groups(
state = "DC",
cb = TRUE,
year = 2021
)
dc_tracts_raw <- tracts(
state = 'DC',
cb = TRUE,
year = 2021
)
dc_state <- states(
cb = TRUE,
year = 2021
) %>%
filter(STUSPS == 'DC')
dc_wards <- st_read('Wards_from_1992/Wards_from_1992.shp')
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84')
ch_tracts <- dc_tracts_raw %>%
filter(TRACTCE == '007304' | TRACTCE == '009804')
ward8 <- dc_wards %>%
filter(WARD == 8)
### proposed boundaries and civic institutions
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
install.packages("remotes")
remotes::install_github("UrbanInstitute/urbnthemes", build_vignettes = TRUE)
library(urbnthemes)
### proposed boundaries and civic institutions
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("landmarks_proposedarea")
)
server <- function(input, output, session) {
output$landmarks_proposedarea <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
)
})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",height = 1000)
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",height = 1000)
)
server <- function(input, output, session) {
data_1 <- reactive({
x <- ch_bg
})
output$mymap <- renderLeaflet({
ch_bg <- data()
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = 100%)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = '100%')
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("Esri.OceanBasemap") %>%
fitBounds(160, -30, 185, -50)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
output$map <- renderLeaflet({
leaflet() %>% addTiles() %>%
fitBounds(160, -30, 185, -50)
})
}
shinyApp(ui, server)
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>%
fitBounds(160, -30, 185, -50)
})
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>%
fitBounds(160, -30, 185, -50)
})
}
shinyApp(ui, server)
leaflet() %>% addTiles()
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>% addTiles()
})
}
shinyApp(ui, server)
### proposed boundaries and civic institutions
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
set_urbn_defaults(style = "map")
options(tigris_class = "sf")
### import raw data
dc_bg_raw <- block_groups(
state = "DC",
cb = TRUE,
year = 2021
)
dc_tracts_raw <- tracts(
state = 'DC',
cb = TRUE,
year = 2021
)
dc_state <- states(
cb = TRUE,
year = 2021
) %>%
filter(STUSPS == 'DC')
dc_wards <- st_read('Wards_from_1992/Wards_from_1992.shp')
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84')
ch_tracts <- dc_tracts_raw %>%
filter(TRACTCE == '007304' | TRACTCE == '009804')
ward8 <- dc_wards %>%
filter(WARD == 8)
### proposed boundaries and civic institutions
landmarks_proposedarea <- leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
landmarks_proposedarea
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>% addTiles()
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
set_urbn_defaults(style = "map")
options(tigris_class = "sf")
### import raw data
dc_bg_raw <- block_groups(
state = "DC",
cb = TRUE,
year = 2021
)
dc_tracts_raw <- tracts(
state = 'DC',
cb = TRUE,
year = 2021
)
dc_state <- states(
cb = TRUE,
year = 2021
) %>%
filter(STUSPS == 'DC')
dc_wards <- st_read('Wards_from_1992/Wards_from_1992.shp')
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84')
ch_tracts <- dc_tracts_raw %>%
filter(TRACTCE == '007304' | TRACTCE == '009804')
ward8 <- dc_wards %>%
filter(WARD == 8)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = '100%', height = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap",width = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap", width = '100%', height = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
library(tigris)
library(tidyverse)
library(urbnthemes)
library(sf)
library(leaflet)
library(rgdal)
library(shiny)
set_urbn_defaults(style = "map")
options(tigris_class = "sf")
### import raw data
dc_bg_raw <- block_groups(
state = "DC",
cb = TRUE,
year = 2021
)
dc_tracts_raw <- tracts(
state = 'DC',
cb = TRUE,
year = 2021
)
dc_state <- states(
cb = TRUE,
year = 2021
) %>%
filter(STUSPS == 'DC')
dc_wards <- st_read('Wards_from_1992/Wards_from_1992.shp')
ch_landmarks <- read_csv('congress_heights_landmarks-geocoded.csv')
# clean raw data
ch_bg <- dc_bg_raw %>%
filter(TRACTCE == '007304' & BLKGRPCE %in% c('1','2','3') | TRACTCE == '009804' & BLKGRPCE %in% c('1','2')) %>%
st_transform(crs = 'WGS84')
ch_tracts <- dc_tracts_raw %>%
filter(TRACTCE == '007304' | TRACTCE == '009804')
ward8 <- dc_wards %>%
filter(WARD == 8)
### shiny app prep
ui <- fluidPage(
leafletOutput("mymap", width = '100%', height = '100%')
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(data = ch_bg) %>%
addTiles() %>%
addPolygons(color = palette_urbn_cyan[4],
weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
highlightOptions = highlightOptions(color = "white", weight = 2,
bringToFront = TRUE)) %>%
addMarkers(data = ch_landmarks,
lng = ~Longitude, lat = ~Latitude,
label = ~Name) %>%
addProviderTiles(providers$CartoDB.Positron)
})
}
shinyApp(ui, server)
